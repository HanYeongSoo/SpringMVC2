2022-04-10

1. 스프링 MVC - 기본 기능
	.- jsp를 사용하지 않으면 Jar파일이 좋음
	. Jar에는 내장 서버가 들어있으며, webapp경로도 사용하지 않음

2. 로깅 간단히 알아보기
	.- SLF4J - 로그 관련 인터페이스
	.- Logback - SLF4J에서 제공하는 구현체 중 하나

	.- @RestController는 return되는 반환값을 HTTP 메세지 바디에 바로 입력함, @ResponseBody와 관련이 있음
	.- @Controller는 반환되는 return값을 뷰로 랜더링 하는거고 ..

	.- LEVEL: TRACE > DEBUG > INFO > WARN > ERROR
		개발 서버는 debug 출력
		운영 서버는 info 출력

	.- 올바른 로그 사용법
		.- log.debug("data={}", data) // log.debug("data="+data) 이걸로 하면 + 연산이 들어가버림

	.- 로그 사용 시 장점
		-1. 쓰레드 정보, 클래스 이름 같은 부가 정보를 함께 볼 수 있고, 출력 모양을 조정할 수 있다
		-2. 로그 레벨에 따라 개발 서버에서는 모든 로그를 출력하고, 운영서버에서는 출력하지 않는 등 로그를 상황에 맞게 조절할 수 있다.
		-3. 시스템 아웃 콘솔에만 출력하는 것이 아니라, 파일이나 네트워크 등, 로그를 별도의 위치에 남길 수 있다.
			특히 파일로 남길 때는 일별, 특정 용량에 따라 로그를 분할하는 것도 가능하다.
		-4. 성능도 일반 System.out보다 좋다. (내부 버퍼링, 멀티 쓰레드 등등) 그래서 실무에서는 꼭 로그를 사용해야 한다.

3. 요청 매핑
	.- 매핑 정보 
		.- @RestController
			. 위에서 정리 했다...
		.- @RequestMapping("/hello-basic")
			. /hello-basic 이라는 URL 호출이 오면 이 메서드가 실행되도록 매핑
			. 대부분의 속성을 배열[]로 제공하므로 다중 설정이 가능 ({"/hello-basic", "/hello-go"})

	.- 매핑 요청에 대해서 둘 다 허용함
		.- 매핑 : /hello-basic >>>>> URL 요청 : /hello-basic 이나 /hello-basic/ 이나 같게 봄

	.- HTTP 메서드는 method를 입력해주지 않을 시 모든 method요청에 반응함

	.- 최근 HTTP API는 다음과 같이 리소스 경로에 식별자를 넣는 스타일을 선호한다.
		ex) /mapping/userA
		ex) /users/1

	.- @RequestMapping 은 URL 경로를 템플릿화 할 수 있는데, @PathVariable 을 사용하면 매칭 되는 부분을 편리하게 조회할 수 있다.

2022-04-11
4. 요청 매핑 - API 예시
	.- 회원 관리 API
		.- 회원 목록 조회: GET /users
		.- 회원 등록: POST /users
		.- 회원 조회: GET /users/{userId}
		.- 회원 수정: PATCH /users/{userId}
		.- 회원 삭제: DELETE /users/{userId}


2022-04-12
5. HTTP 요청 - 기본, 헤더 조회
	.- HttpServletRequest, HttpServletResponse
	.- HttpMethod : HTTP 메서드 조회
	.- Locale
	.- @RequestHeader MultiValueMap<String, String> headerMap
		.- 모든 HTTP 헤더를 MultiValueMap 형식으로 조회한다
	.- @RequestHeader("host") String host
		.- 특정 HTTP 헤더를 조회한다. 속성 필수 값 여부: required , 기본 값 속성: defaultValue
	.- @CookieValue(value = "myCookie", required = false) String cookie
		.- 특정 쿠키를 조회한다. 속성 필수 값 여부: required, 기본 값: defaultValue
	.- MultiValueMap
		.- MAP과 유사한데, 하나의 키에 여러 값을 받을 수 있다.
		.- HTTP header, HTTP 쿼리 파라미터와 같이 하나의 키에 여러 값을 받을 때 사용한다.
		.- keyA=value1&keyA=value2


	.- @Slf4j
		.- private static final org.slf4j.Logger log =
		   org.slf4j.LoggerFactory.getLogger(RequestHeaderController.class);  이 코드를 자동으로 선언해주어 우리는 log로 사용하면 됨

6. HTTP 요청 파라미터 - 쿼리 파라미터, HTML Form
	.- 서블릿에서 학습했던 HTTP 요청 데이터를 조회 하는 방법을 다시 떠올려보자. 그리고 서블릿으로 학습했던 
		내용을 스프링이 얼마나 깔끔하고 효율적으로 바꾸어주는지 알아보자.
	.- HTTP 요청 메시지를 통해 클라이언트에서 서버로 데이터를 전달하는 방법을 알아보자.
	.- 클라이언트에서 서버로 요청 데이터를 전달할 때는 주로 다음 3가지 방법을 사용한다.
		.- GET - 쿼리 파라미터
			/url?username=hello&age=20
			메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함해서 전달
			예) 검색, 필터, 페이징등에서 많이 사용하는 방식
		.- POST - HTML Form
			content-type: application/x-www-form-urlencoded
			메시지 바디에 쿼리 파리미터 형식으로 전달 username=hello&age=20
			예) 회원 가입, 상품 주문, HTML Form 사용
		.- HTTP message body에 데이터를 직접 담아서 요청
			HTTP API에서 주로 사용, JSON, XML, TEXT
			데이터 형식은 주로 JSON 사용
			POST, PUT, PATCH

	.- GET 쿼리 파리미터 전송 방식이든, POST HTML Form 전송 방식이든 둘다 형식이 같으므로 구분없이 조회할 수 있다.
		이것을 간단히 요청 파라미터(request parameter) 조회라 한다.

2022-04-13
7. HTTP 요청 파라미터 - @RequestParam
	.- @RequestParam : 파라미터 이름으로 바인딩
	.- @ResponseBody : view 조회를 무시하고, HTTP message body에 직접 해당 내용 입력

	.- @RequestParam의 name(value)속성이 파라미터 이름으로 사용
		.- @RequestParam("username") String memberName => request.getParameter("username")

	.- HTTP 파라미터 이름이 변수 이름과 같으면 @RequestParam(name="xx") 생략 가능

	.- @RequestParam.required
		.- 파라미터 필수 여부, 기본값이 파라미터 필수( true )이다.
	
	.- 파라미터에 값이 없는 경우 defaultValue 를 사용하면 기본 값을 적용할 수 있다. 이미 기본 값이 있기 때문에 required 는 의미가 없다
	
	.- defaultValue 는 빈 문자의 경우에도 설정한 기본 값이 적용된다. => /request-param?username=

	.- @RequestParam Map
		.-Map(key=value)

8. HTTP 요청 파라미터 - @ModelAttribute
	.- @ModelAttribute가 있으면 그 옆에 있는 객체를 생성하고 저장하고 불러오는걸 지 혼자 다해줌
	.- HelloData라는 객체를 만들었다고 가정 시 @ModelAttribute가 있으면 요청 파라미터의 이름으로 HelloData 객체의 프로퍼티를 찾는다. 
		그리고 해당 프로퍼티의 setter를 호출해서 파라미터의 값을 입력(바인딩) 한다
		예) 파라미터 이름이 username 이면 setUsername() 메서드를 찾아서 호출하면서 값을 입력한다.

	.- 프로퍼티?
		.- 객체에 getUsername() , setUsername() 메서드가 있으면, 이 객체는 username 이라는 프로퍼티를 가지고 있다.
		.- username 프로퍼티의 값을 변경하면 setUsername() 이 호출되고, 조회하면 getUsername() 이 호출된다


	.- @ModelAttribute 는 생략할 수 있다. 그런데 @RequestParam 도 생략할 수 있으니 혼란이 발생할 수 있다.
	.- 단순 타입 (String, int같은..) 은 @RequestParam , 나머진 @ModelAttribute라고 생각하면 편함

9. 



















